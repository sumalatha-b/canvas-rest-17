#%RAML 1.0
title: canvas-lms-api
version: v1
baseUri: https://canvas.instructure.com/api/v1

securitySchemes:
  Authorization:
    description: Use a Canvas access token
    type: Pass Through
    describedBy:
      headers:
        Authorization:
          description: "Bearer token"
          type: string
          required: true
      responses:
        401:
          description: Unauthorized
securedBy:
  - Authorization


types:
  User: !include /datatypes/users/users-dataType.raml
  Courses: !include /datatypes/courses/courses-dataType.raml
  createCourseReq: !include /datatypes/courses/createCourseRequest-dataType.raml
  createCourseRes: !include /datatypes/courses/createCourseResponse-dataType.raml
  updateCourseReq: !include /datatypes/courses/updateCourseRequest-dataType.raml
  updateCourseRes: !include /datatypes/courses/updateCourseResponse-dataType.raml
  accountUser: !include /datatypes/accountUsers/accountUser-dataType.raml
  upcomingEvents: !include /datatypes/events/upcomingEvents-dataType.raml
  missingSubmission: !include /datatypes/users/missingSubmission-dataType.raml
  courseSearchUser: !include /datatypes/courses/courseSearchUser-dataType.raml
  courseUserId: !include /datatypes/courses/courseUserId-dataType.raml
  courseByUserId: !include /datatypes/courses/courseByUserId-dataType.raml
  courseProgress: !include /datatypes/courses/courseProgress-dataType.raml
  coursebulkuserprogress: !include /datatypes/courses/courseBulkUserProgress-dataType.raml
  
  section: !include /datatypes/sections/sections-dataType.raml
  
  deleteSections: !include /datatypes/sections/deleteSections-dataType.raml
  
  createUserReq: !include /datatypes/users/createUserRequest-dataType.raml
  createUserRes: !include /datatypes/users/createUserResponse-dataType.raml
  
  
  SectionReq: !include /datatypes/sections/sectionRequest-dataType.raml
  SectionRes: !include /datatypes/sections/sectionResponse-dataType.raml
  sectionCrosslistReq: !include /datatypes/sections/sectionCrosslistReq-dataType.raml
  updateUser: !include /datatypes/users/userUpdateRequest-dataType.raml
  updateSectionReq: !include /datatypes/sections/updateSectionRequest-dataType.raml
  updateSectionRes: !include /datatypes/sections/updateSectionResponse-dataType.raml
  
  

/users/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 118064555
  get:
    displayName: Get user details by ID
    description: Get user details by ID
    responses:
      200:
        body:
          application/json:
            type: User
            example: !include /examples/users/users-example.json
  put:
    displayName: Update user by ID
    description: Modify an existing user.
    body:
      application/json:
        type: updateUser
        example: !include /examples/users/updateUserRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: User
            example: !include /examples/users/users-example.json           
/courses/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get courses by ID
    description: Get courses by ID
    responses:
      200:
        body:
          application/json:
            type: Courses
            example: !include /examples/courses/courses-example.json
  delete:
    displayName: Delete course
    description: Delete course
    queryParameters:
      event:
        type: string
        required: true
        example: conclude
    responses:
      200:
        body:
          application/json:
            example: !include /examples/courses/deleteCourse-example.json
  put:
    displayName: Update course
    description: Update course
    body:
      application/json:
        type: updateCourseReq
        example: !include /examples/courses/updateCourseRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: updateCourseRes
            example: !include /examples/courses/updateCourseResponse-example.json

/accounts/{account_id}/courses:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  post:
    displayName: Create course 
    description: Create course
    body:
      application/json:
        type: createCourseReq
        example: !include /examples/courses/createCourseRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: createCourseRes
            example: !include /examples/courses/createCourseResponse-example.json
  
     
     
/accounts/{account_id}/users:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: List users in account
    description: List users in account
    responses:
      200:
        body:
          application/json:
            type: accountUser 
            example: !include /examples/accountUsers/accountUser-example.json
  post:
    displayName: Create user
    description: Create and return a new user and pseudonym for an account.
    body:
      application/json:
        type: createUserReq
        example: !include /examples/users/createUserRequest-example.json
    responses:
      200:
        description: User created successfully
        body:
          application/json:
            type: createUserRes
            example: !include /examples/users/createUserResponse-example.json
/users/self/upcoming_events:
  get:
    displayName: upcoming Events
    description: upcoming Events
    responses:
      200:
        body:
          application/json:
            type: upcomingEvents
            example: !include /examples/events/upcomimgEvents-example.json
/users/{user_id}/missing_submissions:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: list Missing Submission
    description: list Missing Submission
    queryParameters:
      user_id?: string
      observed_user_id?: string
      include[]?:
        type: string
        enum: [planner_overrides, course]
      filter[]?:
        type: string
        enum: [submittable, current_grading_period]
      course_ids[]?: string      
    responses:
      200:
        body:
          application/json:
            type: missingSubmission
            example: !include /examples/users/missingSubmission-example.json
/courses/{course_id}/search_users:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: list Users in Course
    description: list Users in Course
    queryParameters:
      search_term?: string
      sort?:
        type: string
        enum: [username, last_login, email, sis_id]
      enrollment_type[]?:
        type: string
        enum: [teacher, student, student_view, ta, observer, designer]

      enrollment_role?: string
      enrollment_role_id?: string
      include[]?:
        type: string
        enum: [enrollments, locked, avatar_url, test_student, bio, custom_links, current_grading_period_scores, uuid]
      user_ids[]?: string
      enrollment_state[]?:
        type: string
        enum: [active, invited, rejected, completed, inactive]
    responses:
      200:
        body:
          application/json:
            type: courseSearchUser
            example: !include /examples/courses/courseSearchUser-example.json
/courses/{course_id}/users/{id}:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: get single user
    description: get single user
    responses:
      200:
        body:
          application/json:
            type: courseUserId
            example: !include /examples/courses/courseUserId-example.json
/users/{user_id}/courses:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: List courses for a user
    description: List courses for a user
    responses:
      200:
        body:
          application/json:
            type: courseByUserId
            example: !include /examples/courses/courseByUserId-example.json

/courses/{course_id}/users/{user_id}/progress:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    user_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get user progress
    description: Get user progress
    responses:
      200:
        body:
          application/json:
            type: courseProgress
            example: !include /examples/courses/courseProgress-example.json
/courses/{course_id}/bulk_user_progress:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get bulk user progress
    description: Get bulk user progress
    responses:
      200:
        body:
          application/json:
            type: coursebulkuserprogress
            example: !include /examples/courses/courseBulkUserProgress-example.json

 

            
  
 
            
 
/courses/{course_id}/sections:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: List course sections
    description: Returns a paginated list of sections for a course
    queryParameters:
      include:
        type: string
        required: false
        description: Associations to include (students, avatar_url, enrollments, total_students, passback_status, permissions)
      search_term:
        type: string
        required: false
        description: Searches course sections for the term. Minimum 2 characters.
    responses:
      200:
        body:
          application/json:
            type: section
            example: !include /examples/sections/sections-example.json
  post:
    displayName: Create Section
    description: Creates a new section for this course.
    body:
      application/json:
        type: SectionReq
        example: !include /examples/sections/sectionRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: SectionRes
            example: !include /examples/sections/sectionResponse-example.json

/courses/{course_id}/sections/{id}:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    id:
      type: integer
      required: true
      example: 11949585
  get:
    displayName: Get section information
    description: Get details about a specific section by course and section ID
    queryParameters:
      include:
        type: string
        required: false
        description: Associations to include (students, avatar_url, enrollments, total_students, passback_status, permissions)
    responses:
      200:
        body:
          application/json:
            type: section
            example: !include /examples/sections/sections-example.json


  
   
   


  




              








      

   
/sections/{id}/crosslist:
  uriParameters:
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: De-cross-list a section
    description: De-cross-list a section
    queryParameters:
      override_sis_stickiness?: boolean
    responses:
      200:
        body:
          application/json:
            type: deleteSections
            example: !include /examples/sections/deleteSections-example.json
/sections/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: Delete a section
    description: Delete a section
    responses:
      200:
        body:
          application/json:
            type: deleteSections
            example: !include /examples/sections/deleteSections-example.json
  put:
    displayName: Update a Section
    description: Modify an existing section.
    body:
      application/json:
        type: updateSectionReq
        example: !include /examples/sections/updateSectionRequest-example.json
    responses:
      200:
        description: Section updated successfully
        body:
          application/json:
            type: updateSectionRes
            example: !include /examples/sections/updateSectionResponse-example.json


 


    
    

    
/sections/{id}/crosslist/{new_course_id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 11949585
    new_course_id:
      type: integer
      required: true
      example: 12635863
  post:
    displayName: Cross-list Section
    description: Move the section to another course. The new course must belong to the same root account.
    body:
      application/json:
        type: sectionCrosslistReq
        example: !include /examples/sections/sectionCrosslistRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: SectionRes
            example: !include /examples/sections/sectionResponse-example.json



  

  
    

    